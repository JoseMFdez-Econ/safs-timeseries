pars = c("beta","sigma_obs","sigma_process","pred"), chains = mcmc_list$n_chain, iter = mcmc_list$n_mcmc, thin = mcmc_list$n_thin)
mod
pars = extract(mod)
dim(pars$pred)
mean = apply(pars$pred,2,mean)
lower = apply(pars$pred,2,quantile,0.025)
upper = apply(pars$pred,2,quantile,0.975)
upper
lower
plot(mean, type="l", lwd=3, ylim=c(-6.5,-2.5), ylab="Intercept estimate", xlab="")
lines(lower)
lines(upper)
plot(mean, type="l", lwd=3, ylim=c(-10,0), ylab="Intercept estimate", xlab="")
lines(lower)
lines(upper)
points(y,col="red")
plot(mean, type="l", lwd=3, ylim=c(-9,-1), ylab="Intercept estimate", xlab="")
lines(lower)
lines(upper)
points(y,col="red")
plot(mean, type="l", lwd=3, ylim=c(-9,-1), ylab="Predictions", xlab="")
lines(lower)
lines(upper)
points(y,col="red")
mod = fit_stan(y = SalmonSurvCUI$logit.s, x = , model_name="dlm-slope")
SalmonSurvCUI$CUI.apr
model.matrix(lm(SalmonSurvCUI$logit.s ~ SalmonSurvCUI$CUI.apr))
library(statss)
mod = fit_stan(y = SalmonSurvCUI$logit.s, x = model.matrix(lm(SalmonSurvCUI$logit.s ~ SalmonSurvCUI$CUI.apr)), model_name="dlm")
mod
library(statss)
mod = fit_stan(y = SalmonSurvCUI$logit.s, x = model.matrix(lm(SalmonSurvCUI$logit.s ~ SalmonSurvCUI$CUI.apr)), model_name="dlm")
y
x = model.matrix(lm(SalmonSurvCUI$logit.s ~ SalmonSurvCUI$CUI.apr))
x
dim(x)
mod = fit_stan(y = SalmonSurvCUI$logit.s, x = model.matrix(lm(SalmonSurvCUI$logit.s ~ SalmonSurvCUI$CUI.apr)), model_name="dlm")
x
# this is just a time-varying model with time varying intercept and slopes
if(class(x)!="matrix") x = matrix(x,ncol=1)
mod = stan(paste0(stan_dir, "/exec/dlm.stan"), data = list("N"=length(y),"K"=dim(x)[2],"x"=x,"y"=y),
pars = c("beta","sigma_obs","sigma_process","pred"), chains = mcmc_list$n_chain, iter = mcmc_list$n_mcmc, thin = mcmc_list$n_thin)
library(MARSS)
data("SalmonSurvCUI")
y = SalmonSurvCUI$logit.s
x = model.matrix(SalmonSurvCUI$logit.s~SalmonSurvCUI$CUI.apr)
x
class(x)
x
fit_stan(y = y, x = x, model = "dlm")
library(statss)
fit_stan(y = y, x = x, model = "dlm")
library(rstan)
fit_stan(y = y, x = x, model = "dlm")
data("harborSealWA")
harborSealWA
matplot(t(harborSealWA))
matplot(harborSealWA)
matplot(harborSealWA[,-1], type="l")
matplot(harborSealWA$Year,harborSealWA[,-1], type="l")
matplot(harborSealWA[,-1], type="l")
matplot(harborSealWA[,-1], type="l", lwd=3)
matplot(harborSealWA[,-1], type="l", lwd=3, ylab="Ln (abundance)")
mod = fit_dfa(y = t(harborSealWA[,-1]), num_trends = 1)
mod
names(mod)
pars = extract(mod)
pars
pars = extract(fit_dfa(y = t(harborSealWA[,-1]), num_trends = 1))
pars
dim(pars)
pars$x
dim(pars$x)
plot(apply(pars$x[,1,],2,mean), type="l", lwd=3)
plot(apply(pars$x[,1,],2,mean), type="l", lwd=3, ylab="Trend")
plot(apply(pars$x[,1,],2,mean), type="l", lwd=3, ylab="Trend", xlab="")
lines(apply(pars$x[,1,],2,quantile,0.025))
lines(apply(pars$x[,1,],2,quantile,0.975))
plot(apply(pars$x[,1,],2,mean), type="l", lwd=3, ylab="Trend", xlab="", ylab=c(-2,4))
plot(apply(pars$x[,1,],2,mean), type="l", lwd=3, ylab="Trend", xlab="", ylim=c(-2,4))
lines(apply(pars$x[,1,],2,quantile,0.975))
lines(apply(pars$x[,1,],2,quantile,0.025))
plot(apply(pars$x[,1,],2,mean), type="l", lwd=3, ylab="Trend", xlab="", ylim=c(-2,6))
lines(apply(pars$x[,1,],2,quantile,0.025))
lines(apply(pars$x[,1,],2,quantile,0.975))
plot(apply(pars$x[,1,],2,mean), type="l", lwd=3, ylab="Trend", xlab="", ylim=c(-2,5))
lines(apply(pars$x[,1,],2,quantile,0.975))
lines(apply(pars$x[,1,],2,quantile,0.025))
y
harborSealWA
y
harborSealWA
harborSealWA[20,]=NA
harborSealWA[21,]=NA
harborSealWA[22,]=NA
pars2 = extract(fit_dfa(y = t(harborSealWA[,-1]), num_trends = 1))
plot(apply(pars$x[,1,],2,mean), type="l", lwd=3, ylab="Trend", xlab="", ylim=c(-2,5))
lines(apply(pars$x[,1,],2,quantile,0.025))
lines(apply(pars$x[,1,],2,quantile,0.975))
lines(apply(pars2$x[,1,],2,quantile,0.025), col="blue")
lines(apply(pars2$x[,1,],2,quantile,0.975), col="blue")
plot(apply(pars$x[,1,],2,mean), type="l", lwd=3, ylab="Trend", xlab="", ylim=c(-5,5))
lines(apply(pars$x[,1,],2,quantile,0.025))
lines(apply(pars$x[,1,],2,quantile,0.975))
lines(apply(pars2$x[,1,],2,quantile,0.975), col="blue")
lines(apply(pars2$x[,1,],2,quantile,0.025), col="blue")
library(statss)
library(statss)
y
data(lakeWAplankton)
# we want lakeWAplanktonTrans, which has been transformed
# so the 0s are replaced with NAs and the data z-scored
dat = lakeWAplanktonTrans
# use only the 10 years from 1980-1989
plankdat = dat[dat[,"Year"]>=1980 & dat[,"Year"]<1990,]
# create vector of phytoplankton group names
phytoplankton = c("Cryptomonas", "Diatoms", "Greens",
"Unicells", "Other.algae")
# get only the phytoplankton
dat.spp.1980 = plankdat[,phytoplankton]
library(MARSS)
y = dat.spp.1980[50:90,]
library(MARSS)
data(lakeWAplankton)
# we want lakeWAplanktonTrans, which has been transformed
# so the 0s are replaced with NAs and the data z-scored
dat = lakeWAplanktonTrans
# use only the 10 years from 1980-1989
plankdat = dat[dat[,"Year"]>=1980 & dat[,"Year"]<1990,]
# create vector of phytoplankton group names
phytoplankton = c("Cryptomonas", "Diatoms", "Greens",
"Unicells", "Other.algae")
# get only the phytoplankton
dat.spp.1980 = plankdat[,phytoplankton]
y = dat.spp.1980[50:90,]
y
states = c(1,2,1,2,1)
obsVariances = rep(1, ncol(y))
proVariances = c(1,1)
trends = c(1,1)
mcmc_list = list(n_mcmc = 1000, n_burn = 500, n_chain = 3, n_thin = 1)
states = c(1,2,1,2,1)
obsVariances = rep(1, ncol(y))
proVariances = c(1,1)
trends = c(1,1)
mod = stan(paste0(stan_dir, "/exec/marss.stan"),
data = list("N"=nrow(y),"M"=ncol(y), "y"=y,
"states"=states, "S" = max(states), "obsVariances"=obsVariances,
"n_obsvar" = max(obsVariances), "proVariances" = proVariances,
"n_provar" = max(proVariances),
"trends"=trends, "n_trends" = max(trends)),
pars = c("pred"), chains = mcmc_list$n_chain,
iter = mcmc_list$n_mcmc, thin = mcmc_list$n_thin)
library(rstan)
states = c(1,2,1,2,1)
obsVariances = rep(1, ncol(y))
proVariances = c(1,1)
trends = c(1,1)
mod = stan(paste0(stan_dir, "/exec/marss.stan"),
data = list("N"=nrow(y),"M"=ncol(y), "y"=y,
"states"=states, "S" = max(states), "obsVariances"=obsVariances,
"n_obsvar" = max(obsVariances), "proVariances" = proVariances,
"n_provar" = max(proVariances),
"trends"=trends, "n_trends" = max(trends)),
pars = c("pred"), chains = mcmc_list$n_chain,
iter = mcmc_list$n_mcmc, thin = mcmc_list$n_thin)
states = c(1,2,1,2,1)
obsVariances = rep(1, ncol(y))
proVariances = c(1,1)
trends = c(1,1)
mod = stan(paste0(stan_dir, "/exec/marss.stan"),
data = list("N"=nrow(y),"M"=ncol(y), "y"=y,
"states"=states, "S" = max(states), "obsVariances"=obsVariances,
"n_obsvar" = max(obsVariances), "proVariances" = proVariances,
"n_provar" = max(proVariances),
"trends"=trends, "n_trends" = max(trends)),
pars = c("pred"), chains = mcmc_list$n_chain,
iter = mcmc_list$n_mcmc, thin = mcmc_list$n_thin)
stan_dir = find.package("statss")
mod = stan(paste0(stan_dir, "/exec/marss.stan"),
data = list("N"=nrow(y),"M"=ncol(y), "y"=y,
"states"=states, "S" = max(states), "obsVariances"=obsVariances,
"n_obsvar" = max(obsVariances), "proVariances" = proVariances,
"n_provar" = max(proVariances),
"trends"=trends, "n_trends" = max(trends)),
pars = c("pred"), chains = mcmc_list$n_chain,
iter = mcmc_list$n_mcmc, thin = mcmc_list$n_thin)
y
dim(y)
library(statss)
mod = stan(paste0(stan_dir, "/exec/marss.stan"),
data = list("N"=nrow(y),"M"=ncol(y), "y"=y,
"states"=states, "S" = max(states), "obsVariances"=obsVariances,
"n_obsvar" = max(obsVariances), "proVariances" = proVariances,
"n_provar" = max(proVariances),
"trends"=trends, "n_trends" = max(trends)),
pars = c("pred"), chains = mcmc_list$n_chain,
iter = mcmc_list$n_mcmc, thin = mcmc_list$n_thin)
library(statss)
mod = stan(paste0(stan_dir, "/exec/marss.stan"),
data = list("N"=nrow(y),"M"=ncol(y), "y"=y,
"states"=states, "S" = max(states), "obsVariances"=obsVariances,
"n_obsvar" = max(obsVariances), "proVariances" = proVariances,
"n_provar" = max(proVariances),
"trends"=trends, "n_trends" = max(trends)),
pars = c("pred"), chains = mcmc_list$n_chain,
iter = mcmc_list$n_mcmc, thin = mcmc_list$n_thin)
library(statss)
mod = stan(paste0(stan_dir, "/exec/marss.stan"),
data = list("N"=nrow(y),"M"=ncol(y), "y"=y,
"states"=states, "S" = max(states), "obsVariances"=obsVariances,
"n_obsvar" = max(obsVariances), "proVariances" = proVariances,
"n_provar" = max(proVariances),
"trends"=trends, "n_trends" = max(trends)),
pars = c("pred"), chains = mcmc_list$n_chain,
iter = mcmc_list$n_mcmc, thin = mcmc_list$n_thin)
dim(y)
y
dat.spp.1980
y = dat.spp.1980
N = nrow(y)
M = ncol(y)
row_indx_pos = matrix((rep(1:M, N)), M, N)[which(!is.na(y))]
col_indx_pos = matrix(sort(rep(1:N, M)), M, N)[which(!is.na(y))]
N
M
n_pos = length(row_indx_pos)
n_pos
row_indx_pos
dim(y)
120*5
row_indx_pos
col_indx_pos
y
dim(y)
col_indx_pos
row_indx_pos = matrix((rep(1:M, N)), M, N)[which(!is.na(y))]
col_indx_pos = matrix(sort(rep(1:N, M)), M, N)[which(!is.na(y))]
row_indx_pos
library(statss)
states = c(1,2,1,2,1)
obsVariances = rep(1, ncol(y))
proVariances = c(1,1)
trends = c(1,1)
N = nrow(y)
M = ncol(y)
row_indx_pos = matrix((rep(1:M, N)), M, N)[which(!is.na(y))]
col_indx_pos = matrix(sort(rep(1:N, M)), M, N)[which(!is.na(y))]
n_pos = length(row_indx_pos)
mod = stan(paste0(stan_dir, "/exec/marss.stan"),
data = list("N"=nrow(y),"M"=ncol(y), "y"=y,
"states"=states, "S" = max(states), "obsVariances"=obsVariances,
"n_obsvar" = max(obsVariances), "proVariances" = proVariances,
"n_provar" = max(proVariances),
"trends"=trends, "n_trends" = max(trends),
"n_pos" = n_pos,
"col_indx_pos" = col_indx_pos,
"row_indx_pos" = row_indx_pos),
pars = c("pred"), chains = mcmc_list$n_chain,
iter = mcmc_list$n_mcmc, thin = mcmc_list$n_thin)
y
y = y[which(!is.na(y))]
y
dat.spp.1980
y = t(dat.spp.1980)
y
y = t(dat.spp.1980)
states = c(1,2,1,2,1)
obsVariances = rep(1, nrow(y))
proVariances = c(1,1)
trends = c(1,1)
N = ncol(y)
M = nrow(y)
row_indx_pos = matrix((rep(1:M, N)), M, N)[which(!is.na(y))]
col_indx_pos = matrix(sort(rep(1:N, M)), M, N)[which(!is.na(y))]
n_pos = length(row_indx_pos)
n_pos
col_indx_pos
y
y = y[which(!is.na(y))]
mod = stan(paste0(stan_dir, "/exec/marss.stan"),
data = list("N"=nrow(y),"M"=ncol(y), "y"=y,
"states"=states, "S" = max(states), "obsVariances"=obsVariances,
"n_obsvar" = max(obsVariances), "proVariances" = proVariances,
"n_provar" = max(proVariances),
"trends"=trends, "n_trends" = max(trends),
"n_pos" = n_pos,
"col_indx_pos" = col_indx_pos,
"row_indx_pos" = row_indx_pos),
pars = c("pred"), chains = mcmc_list$n_chain,
iter = mcmc_list$n_mcmc, thin = mcmc_list$n_thin)
family= "gaussian"
family
dist = c("gaussian", "binomial", "poisson", "gamma", "lognormal")
which(dist=="family")
which(dist=="family")
which(dist==family)
dist = c("gaussian", "binomial", "poisson", "gamma", "lognormal")
family = which(dist==family)
which(dist==family)
family
library(statss)
y = runif(20)
fit_stan(y, model_name="regression")
library(rstan)
fit_stan(y, model_name="regression")
round(y)
library(statss)
fit_stan(y, model_name="regression")
library(statss)
fit_stan(y, model_name="regression")
y
y_int
x
x = matrix(1,20,1)
fit_stan(y=y,x=x, model_name="regression")
library(statss)
fit_stan(y=y,x=x, model_name="regression")
library(statss)
fit_stan(y=y,x=x, model_name="regression", family="normal")
fit_stan(y=y,x=x, model_name="regression", family="gaussian")
library(statss)
library(statss)
fit_stan(y=y,x=x, model_name="regression", family="gaussian")
library(statss)
fit_stan(y=y,x=x, model_name="dlm", family="gaussian")
fit_stan(y=y,x=x, model_name="dlm-intercept", family="gaussian")
fit_stan(y=y,x=x, model_name="dlm-slope", family="gaussian")
y = matrix(rnorm(20), 2, 10)
y
fit_stan(y=y,model_name="marss", family="gaussian")
library(statss)
fit_stan(y=y,model_name="marss", family="gaussian")
library(statss)
fit_stan(y=y,model_name="marss", family="gaussian")
library(statss)
fit_stan(y=y,model_name="marss", family="gaussian")
library(statss)
fit_stan(y=y,model_name="marss", family="gaussian")
library(rstan)
library(devtools)
devtools::install_github("eric-ward/safs-timeseries/statss")
library(statss)
# for optimizing stan on your machine,
rstan_options(auto_write = TRUE)
options(mc.cores = parallel::detectCores())
library(MARSS)
data("harborSealWA")
#the first column is year
matplot(harborSealWA[,1],harborSealWA[,-1],type="l",
ylab="Log abundance", xlab="")
t(harborSealWA[,-1])
seal.mod= fit_dfa(y = t(harborSealWA[,-1]), num_trends = 1)
pars = extract(seal.mod)
names(pars)
dim(pars$pred)
plot(pred_mean, type="l", lwd = 3, ylim = range(c(pred_mean, pred_lo, pred_hi)))
lines(pred_lo)
lines(pred_hi)
pred_mean = apply(pars$pred, c(2,3), mean)
pred_lo = apply(pars$pred, c(2,3), quantile, 0.025)
pred_hi = apply(pars$pred, c(2,3), quantile, 0.975)
plot(pred_mean, type="l", lwd = 3, ylim = range(c(pred_mean, pred_lo, pred_hi)))
lines(pred_lo)
lines(pred_hi)
pred_mean = apply(pars$pred, c(2,3), mean)
pred_lo = apply(pars$pred, c(2,3), quantile, 0.025)
pred_hi = apply(pars$pred, c(2,3), quantile, 0.975)
pred_mean
pars$x
dim(pars$x)
pred_mean = apply(pars$x, c(2,3), mean)
pred_lo = apply(pars$x, c(2,3), quantile, 0.025)
pred_hi = apply(pars$x, c(2,3), quantile, 0.975)
plot(pred_mean, type="l", lwd = 3, ylim = range(c(pred_mean, pred_lo, pred_hi)))
lines(pred_lo)
lines(pred_hi)
plot(pred_mean, type="l", lwd = 3, ylim = range(c(pred_mean, pred_lo, pred_hi)))
pred_mean
pred_mean = c(apply(pars$x, c(2,3), mean))
pred_lo = c(apply(pars$x, c(2,3), quantile, 0.025))
pred_hi = c(apply(pars$x, c(2,3), quantile, 0.975))
plot(pred_mean, type="l", lwd = 3, ylim = range(c(pred_mean, pred_lo, pred_hi)))
lines(pred_lo)
lines(pred_hi)
pred_mean = c(apply(pars$x, c(2,3), mean))
pred_lo = c(apply(pars$x, c(2,3), quantile, 0.025))
pred_hi = c(apply(pars$x, c(2,3), quantile, 0.975))
plot(pred_mean, type="l", lwd = 3, ylim = range(c(pred_mean, pred_lo, pred_hi)), main = "Trend")
lines(pred_lo)
lines(pred_hi)
library(statss)
# load the data (there are 3 datasets contained here)
data(lakeWAplankton)
# we want lakeWAplanktonTrans, which has been transformed
# so the 0s are replaced with NAs and the data z-scored
dat = lakeWAplanktonTrans
# use only the 10 years from 1980-1989
plankdat = dat[dat[,"Year"]>=1980 & dat[,"Year"]<1990,]
# create vector of phytoplankton group names
phytoplankton = c("Cryptomonas", "Diatoms", "Greens",
"Unicells", "Other.algae")
# get only the phytoplankton
dat.spp.1980 = plankdat[,phytoplankton]
library(MARSS)
# load the data (there are 3 datasets contained here)
data(lakeWAplankton)
# we want lakeWAplanktonTrans, which has been transformed
# so the 0s are replaced with NAs and the data z-scored
dat = lakeWAplanktonTrans
# use only the 10 years from 1980-1989
plankdat = dat[dat[,"Year"]>=1980 & dat[,"Year"]<1990,]
# create vector of phytoplankton group names
phytoplankton = c("Cryptomonas", "Diatoms", "Greens",
"Unicells", "Other.algae")
# get only the phytoplankton
dat.spp.1980 = plankdat[,phytoplankton]
t(dat.spp.1980)
y = t(dat.spp.1980)
dim(y)
covar = matrix(runif(3*ncol(y)), nrow=3)
covar
dim(covar)
fit_dfa(y = t(dat.spp.1980), covar=covar, num_trends=3)
library(rstan)
fit_dfa(y = t(dat.spp.1980), covar=covar, num_trends=3)
covar = matrix(runif(37*ncol(y)), nrow=37)
dim(covar)
covar_index = matrix(1, nrow(y), nrow(covar))
covar_index
37*2
length(38:74)
length(75:(75+37))
length(75:(75+36))
75:(75+36)
y = t(dat.spp.1980)
covar = matrix(runif(37*ncol(y)), nrow=37)
covar_index = matrix(1, nrow(y), nrow(covar))
# let's make species 1, 3 have the same effects, 2/4 have the same effects and 5 be different
covar_index[1,] = 1:37
covar_index[3,] = 1:37
covar_index[2,] = 38:74
covar_index[4,] = 38:74
covar_index[5,] = 75:111
fit_dfa(y = y, covar=covar, covar_index = covar_index, num_trends=3)
library(statss)
y = t(dat.spp.1980)
covar = matrix(runif(37*ncol(y)), nrow=37)
covar_index = matrix(1, nrow(y), nrow(covar))
# let's make species 1, 3 have the same effects, 2/4 have the same effects and 5 be different
covar_index[1,] = 1:37
covar_index[3,] = 1:37
covar_index[2,] = 38:74
covar_index[4,] = 38:74
covar_index[5,] = 75:111
fit_dfa(y = y, covar=covar, covar_index = covar_index, num_trends=3)
covar_index
library(statss)
library(statss)
library(statss)
fit_stan(y = cumsum(20), model="ss_ar")
fit_stan(y = cumsum(20), model="ss_rw")
fit_stan(y = cumsum(20), model="ss_ar")
y
y = rnorm(20)
library(statss)
fit_stan(y = y, model="ss_ar")
fit_stan(y = y, model="ss_rw")
set.seed(123)
set.seed(123)
y = rnorm(20)
mod = stan_fit(y, model="ar")
library(statss)
set.seed(123)
y = rnorm(20)
mod = stan_fit(y, model="ar")
library(statss)
library(statss)
stan_fit
library(statss)
?statss
library(statss)
?fit_stan
set.seed(123)
y = rnorm(20)
mod = fit_stan(y, model="ar")
library(rstan)
set.seed(123)
y = rnorm(20)
mod = fit_stan(y, model="ar")
mod = fit_stan(y, model="ar", mcmc_list=list(n_chain = 1, n_mcmc=100, n_burn=50) )
mod = fit_stan(y, model="ar", mcmc_list=list(n_chain = 1, n_mcmc=100, n_burn=50, n_thin=1) )
set.seed(123)
y = rnorm(20)
mod = fit_stan(y, model="ar", mcmc_list=list(n_chain = 1, n_mcmc=100, n_burn=50, n_thin=1) )
extract(mod)
extract(mod)$lp__
mean(extract(mod)$lp__)
mean(extract(mod)$lp__)
library(testthat)
?expect_equal
expect_equal(mean(extract(mod)$lp__), -11.51702)
expect_equal(mean(extract(mod)$lp__), -11.51702, tol=0.001)
expect_equal(mean(extract(mod)$lp__), -11.51702, tol=0.001)
set.seed(123)
y = rnorm(20)
mod = fit_stan(y, model="ar", mcmc_list=list(n_chain = 1, n_mcmc=100, n_burn=50, n_thin=1) )
mean(extract(mod)$lp__)
expect_equal(mean(extract(mod)$lp__), -11.51702, tol=0.001)
?fit_stan
?expect_equa
?expect_equal
