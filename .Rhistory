if(model_name == "arma11") {
mod = stan(paste0(stan_dir,"/exec/arma11.stan"), data = list("y"=y,"N"=length(y)), pars = c("sigma", "theta", "mu", "phi"),
chains = mcmc_list$n_chain, iter = mcmc_list$n_mcmc, thin = mcmc_list$n_thin)
}
if(model_name == "dlm-intercept") {
if(is.na(x)) {
x = matrix(0, nrow=length(y), ncol=1)
}
if(class(x)!="matrix") x = matrix(x,ncol=1)
mod = stan(paste0(stan_dir, "/exec/dlm_int.stan"), data = list("N"=length(y),"K"=dim(x)[2],"x"=x,"y"=y),
pars = c("beta","sigma_obs","sigma_pred","pred"), chains = mcmc_list$n_chain, iter = mcmc_list$n_mcmc, thin = mcmc_list$n_thin)
}
return(mod)
}
\
Temp
fit_stan(Y = Temp, model_name="dlm-intercept")
fit_stan(y = Temp, model_name="dlm-intercept")
fit_stan(y = Temp, model_name="dlm-intercept")
y = y
y = Temp
x = NA
est_drift=FALSE
est_mean = FALSE
P = 1
Q = 1
mcmc_list = list(n_mcmc = 1000, n_burn = 500, n_chain = 3, n_thin = 1)
stan_dir = find.package("statss")
if(is.na(x)) {
x = matrix(0, nrow=length(y), ncol=1)
}
if(class(x)!="matrix") x = matrix(x,ncol=1)
mod = stan(paste0(stan_dir, "/exec/dlm_int.stan"), data = list("N"=length(y),"K"=dim(x)[2],"x"=x,"y"=y),
pars = c("beta","sigma_obs","sigma_pred","pred"), chains = mcmc_list$n_chain, iter = mcmc_list$n_mcmc, thin = mcmc_list$n_thin)
mod = stan(paste0(stan_dir, "/exec/dlm_int.stan"), data = list("N"=length(y),"K"=dim(x)[2],"x"=x,"y"=y),
pars = c("beta","sigma_obs","sigma_pred","pred"), chains = mcmc_list$n_chain, iter = mcmc_list$n_mcmc, thin = mcmc_list$n_thin)
mod = stan(paste0(stan_dir, "/exec/dlm_int.stan"), data = list("N"=length(y),"K"=dim(x)[2],"x"=x,"y"=y),
pars = c("beta","sigma_obs","sigma_pred","pred"), chains = mcmc_list$n_chain, iter = mcmc_list$n_mcmc, thin = mcmc_list$n_thin)
mod = stan(paste0(stan_dir, "/exec/dlm_int.stan"), data = list("N"=length(y),"K"=dim(x)[2],"x"=x,"y"=y),
pars = c("beta","sigma_obs","sigma_pred","pred"), chains = mcmc_list$n_chain, iter = mcmc_list$n_mcmc, thin = mcmc_list$n_thin)
library(statss)
mod = stan(paste0(stan_dir, "/exec/dlm_int.stan"), data = list("N"=length(y),"K"=dim(x)[2],"x"=x,"y"=y),
pars = c("beta","sigma_obs","sigma_pred","pred"), chains = mcmc_list$n_chain, iter = mcmc_list$n_mcmc, thin = mcmc_list$n_thin)
library(statss)
library(statss)
mod = stan(paste0(stan_dir, "/exec/dlm_int.stan"), data = list("N"=length(y),"K"=dim(x)[2],"x"=x,"y"=y),
pars = c("beta","sigma_obs","sigma_pred","pred"), chains = mcmc_list$n_chain, iter = mcmc_list$n_mcmc, thin = mcmc_list$n_thin)
library(statss)
mod = stan(paste0(stan_dir, "/exec/dlm_int.stan"), data = list("N"=length(y),"K"=dim(x)[2],"x"=x,"y"=y),
pars = c("beta","sigma_obs","sigma_pred","pred"), chains = mcmc_list$n_chain, iter = mcmc_list$n_mcmc, thin = mcmc_list$n_thin)
library(statss)
mod = stan(paste0(stan_dir, "/exec/dlm_int.stan"), data = list("N"=length(y),"K"=dim(x)[2],"x"=x,"y"=y),
pars = c("beta","sigma_obs","sigma_pred","pred"), chains = mcmc_list$n_chain, iter = mcmc_list$n_mcmc, thin = mcmc_list$n_thin)
mod = stan(paste0(stan_dir, "/exec/dlm_int.stan"), data = list("N"=length(y),"K"=dim(x)[2],"x"=x,"y"=y),
pars = c("beta","sigma_obs","sigma_process","pred","intercept"), chains = mcmc_list$n_chain, iter = mcmc_list$n_mcmc, thin = mcmc_list$n_thin)
data("SalmonSurvCUI")
SalmonSurvCUI
mod = fit_stan(SalmonSurvCUI$logis.s, model_name="dlm-intercept")
mod = fit_stan(y = SalmonSurvCUI$logis.s, model_name="dlm-intercept")
library(statss)
SalmonSurvCUI$logis.s
data(SalmonSurvCUI)
SalmonSurvCUI$logis.s
SalmonSurvCUI$logit.s
mod = fit_stan(y = SalmonSurvCUI$logit.s, model_name="dlm-intercept")
library(statss)
library(statss)
?fit_stan
SalmonSurvCUI$logit.s
mod = fit_stan(y = SalmonSurvCUI$logit.s, model_name="dlm-intercept")
library(rstan)
mod = fit_stan(y = SalmonSurvCUI$logit.s, model_name="dlm-intercept")
mod = stan(paste0(stan_dir, "/exec/dlm_int.stan"), data = list("N"=length(y),"K"=dim(x)[2],"x"=x,"y"=y),
pars = c("beta","sigma_obs","sigma_process","pred","intercept"), chains = mcmc_list$n_chain, iter = mcmc_list$n_mcmc, thin = mcmc_list$n_thin)
y
y = SalmonSurvCUI$logit.s
mod = stan(paste0(stan_dir, "/exec/dlm_int.stan"), data = list("N"=length(y),"K"=dim(x)[2],"x"=x,"y"=y),
pars = c("beta","sigma_obs","sigma_process","pred","intercept"), chains = mcmc_list$n_chain, iter = mcmc_list$n_mcmc, thin = mcmc_list$n_thin)
y
x
if(is.na(x)) {
x = matrix(0, nrow=length(y), ncol=1)
}
if(class(x)!="matrix") x = matrix(x,ncol=1)
x
x = NA
if(is.na(x)) {
x = matrix(0, nrow=length(y), ncol=1)
}
if(class(x)!="matrix") x = matrix(x,ncol=1)
x
y
mod = stan(paste0(stan_dir, "/exec/dlm_int.stan"), data = list("N"=length(y),"K"=dim(x)[2],"x"=x,"y"=y),
pars = c("beta","sigma_obs","sigma_process","pred","intercept"), chains = mcmc_list$n_chain, iter = mcmc_list$n_mcmc, thin = mcmc_list$n_thin)
extract(mod)
extract(mod)$intercept
apply(extract(mod)$intercept, 2, mean)
mean = apply(extract(mod)$intercept, 2, mean)
lower = apply(extract(mod)$intercept, 2, quantile, 0.025)
upper = apply(extract(mod)$intercept, 2, quantile, 0.975)
plot(mean, type="l")
plot(mean, type="l")
lines(lower)
lines(upper)
plot(mean, type="l", lwd=3, ylim=c(-6,-3))
lines(lower)
lines(upper)
plot(mean, type="l", lwd=3, ylim=c(-6,-2.5))
lines(lower)
lines(upper)
plot(mean, type="l", lwd=3, ylim=c(-6.5,-2.5))
lines(lower)
lines(upper)
plot(mean, type="l", lwd=3, ylim=c(-6.5,-2.5), ylab="Intercept estimate")
lines(lower)
lines(upper)
plot(mean, type="l", lwd=3, ylim=c(-6.5,-2.5), ylab="Intercept estimate", xlab="")
lines(lower)
lines(upper)
nSalmonSurvCUI
nSalmonSurvCUI
y
plot(mean, type="l", lwd=3, ylim=c(-6.5,-2.5), ylab="Intercept estimate", xlab="")
lines(lower)
lines(upper)
points(y,col="red")
plot(SalmonSurvCUI$year, SalmonSurvCUI$logit.s)
plot(SalmonSurvCUI$year, SalmonSurvCUI$logit.s, lwd=2)
x
y = y
y
x = SalmSurvCUI$
names(SalmonSurvCUI)
x = SalmSurvCUI$CUI.apr
data(SalmonSurvCUI)
library(MARSS)
data(SalmonSurvCUI)
x = SalmSurvCUI$CUI.apr
x = SalmonSurvCUI$CUI.apr
x
mod = stan(paste0(stan_dir, "/exec/dlm_slope.stan"), data = list("N"=length(y),"K"=dim(x)[2],"x"=x,"y"=y),
pars = c("beta","sigma_obs","sigma_process","pred"), chains = mcmc_list$n_chain, iter = mcmc_list$n_mcmc, thin = mcmc_list$n_thin)
x
if(class(x)!="matrix") x = matrix(x,ncol=1)
mod = stan(paste0(stan_dir, "/exec/dlm_slope.stan"), data = list("N"=length(y),"K"=dim(x)[2],"x"=x,"y"=y),
pars = c("beta","sigma_obs","sigma_process","pred"), chains = mcmc_list$n_chain, iter = mcmc_list$n_mcmc, thin = mcmc_list$n_thin)
attach.jags(mod)
extract(mod)$pars
extract(mod)$beta
dim(extract(mod)$beta)
library(statss)
mod = stan(paste0(stan_dir, "/exec/dlm_slope.stan"), data = list("N"=length(y),"K"=dim(x)[2],"x"=x,"y"=y),
pars = c("beta","sigma_obs","sigma_process","pred"), chains = mcmc_list$n_chain, iter = mcmc_list$n_mcmc, thin = mcmc_list$n_thin)
library(statss)
mod = stan(paste0(stan_dir, "/exec/dlm_slope.stan"), data = list("N"=length(y),"K"=dim(x)[2],"x"=x,"y"=y),
pars = c("beta","sigma_obs","sigma_process","pred"), chains = mcmc_list$n_chain, iter = mcmc_list$n_mcmc, thin = mcmc_list$n_thin)
library(statss)
mod = stan(paste0(stan_dir, "/exec/dlm_slope.stan"), data = list("N"=length(y),"K"=dim(x)[2],"x"=x,"y"=y),
pars = c("beta","sigma_obs","sigma_process","pred"), chains = mcmc_list$n_chain, iter = mcmc_list$n_mcmc, thin = mcmc_list$n_thin)
library(statss)
mod = stan(paste0(stan_dir, "/exec/dlm_slope.stan"), data = list("N"=length(y),"K"=dim(x)[2],"x"=x,"y"=y),
pars = c("beta","sigma_obs","sigma_process","pred"), chains = mcmc_list$n_chain, iter = mcmc_list$n_mcmc, thin = mcmc_list$n_thin)
library(statss)
mod = stan(paste0(stan_dir, "/exec/dlm_slope.stan"), data = list("N"=length(y),"K"=dim(x)[2],"x"=x,"y"=y),
pars = c("beta","sigma_obs","sigma_process","pred"), chains = mcmc_list$n_chain, iter = mcmc_list$n_mcmc, thin = mcmc_list$n_thin)
dim(x)
library(statss)
mod = stan(paste0(stan_dir, "/exec/dlm_slope.stan"), data = list("N"=length(y),"K"=dim(x)[2],"x"=x,"y"=y),
pars = c("beta","sigma_obs","sigma_process","pred"), chains = mcmc_list$n_chain, iter = mcmc_list$n_mcmc, thin = mcmc_list$n_thin)
library(statss)
mod = stan(paste0(stan_dir, "/exec/dlm_slope.stan"), data = list("N"=length(y),"K"=dim(x)[2],"x"=x,"y"=y),
pars = c("beta","sigma_obs","sigma_process","pred"), chains = mcmc_list$n_chain, iter = mcmc_list$n_mcmc, thin = mcmc_list$n_thin)
library(statss)
mod = stan(paste0(stan_dir, "/exec/dlm_slope.stan"), data = list("N"=length(y),"K"=dim(x)[2],"x"=x,"y"=y),
pars = c("beta","sigma_obs","sigma_process","pred"), chains = mcmc_list$n_chain, iter = mcmc_list$n_mcmc, thin = mcmc_list$n_thin)
library(statss)
mod = stan(paste0(stan_dir, "/exec/dlm_slope.stan"), data = list("N"=length(y),"K"=dim(x)[2],"x"=x,"y"=y),
pars = c("beta","sigma_obs","sigma_process","pred"), chains = mcmc_list$n_chain, iter = mcmc_list$n_mcmc, thin = mcmc_list$n_thin)
library(statss)
pars = c("beta","sigma_obs","sigma_process","pred"), chains = mcmc_list$n_chain, iter = mcmc_list$n_mcmc, thin = mcmc_list$n_thin)
pars = c("beta","sigma_obs","sigma_process","pred"), chains = mcmc_list$n_chain, iter = mcmc_list$n_mcmc, thin = mcmc_list$n_thin)
mod = stan(paste0(stan_dir, "/exec/dlm_slope.stan"), data = list("N"=length(y),"K"=dim(x)[2],"x"=x,"y"=y),
pars = c("beta","sigma_obs","sigma_process","pred"), chains = mcmc_list$n_chain, iter = mcmc_list$n_mcmc, thin = mcmc_list$n_thin)
x
x = cbind(x,x)
mod = stan(paste0(stan_dir, "/exec/dlm_slope.stan"), data = list("N"=length(y),"K"=dim(x)[2],"x"=x,"y"=y),
pars = c("beta","sigma_obs","sigma_process","pred"), chains = mcmc_list$n_chain, iter = mcmc_list$n_mcmc, thin = mcmc_list$n_thin)
mod = stan(paste0(stan_dir, "/exec/dlm_slope.stan"), data = list("N"=length(y),"K"=dim(x)[2],"x"=x,"y"=y),
pars = c("beta","sigma_obs","sigma_process","pred"), chains = mcmc_list$n_chain, iter = mcmc_list$n_mcmc, thin = mcmc_list$n_thin)
library(statss)
x = x[,-1]
x
x = as.matrix(x,ncol=1)
cx
x
mod = stan(paste0(stan_dir, "/exec/dlm_slope.stan"), data = list("N"=length(y),"K"=dim(x)[2],"x"=x,"y"=y),
pars = c("beta","sigma_obs","sigma_process","pred"), chains = mcmc_list$n_chain, iter = mcmc_list$n_mcmc, thin = mcmc_list$n_thin)
library(statss)
mod = stan(paste0(stan_dir, "/exec/dlm_slope.stan"), data = list("N"=length(y),"K"=dim(x)[2],"x"=x,"y"=y),
pars = c("beta","sigma_obs","sigma_process","pred"), chains = mcmc_list$n_chain, iter = mcmc_list$n_mcmc, thin = mcmc_list$n_thin)
mod = stan(paste0(stan_dir, "/exec/dlm_slope.stan"), data = list("N"=length(y),"K"=dim(x)[2],"x"=x,"y"=y),
pars = c("beta","sigma_obs","sigma_process","pred"), chains = mcmc_list$n_chain, iter = mcmc_list$n_mcmc, thin = mcmc_list$n_thin)
library(statss)
mod = stan(paste0(stan_dir, "/exec/dlm_slope.stan"), data = list("N"=length(y),"K"=dim(x)[2],"x"=x,"y"=y),
pars = c("beta","sigma_obs","sigma_process","pred"), chains = mcmc_list$n_chain, iter = mcmc_list$n_mcmc, thin = mcmc_list$n_thin)
library(statss)
mod = stan(paste0(stan_dir, "/exec/dlm_slope.stan"), data = list("N"=length(y),"K"=dim(x)[2],"x"=x,"y"=y),
pars = c("beta","sigma_obs","sigma_process","pred"), chains = mcmc_list$n_chain, iter = mcmc_list$n_mcmc, thin = mcmc_list$n_thin)
library(statss)
mod = stan(paste0(stan_dir, "/exec/dlm_slope.stan"), data = list("N"=length(y),"K"=dim(x)[2],"x"=x,"y"=y),
pars = c("beta","sigma_obs","sigma_process","pred"), chains = mcmc_list$n_chain, iter = mcmc_list$n_mcmc, thin = mcmc_list$n_thin)
library(statss)
mod = stan(paste0(stan_dir, "/exec/dlm_slope.stan"), data = list("N"=length(y),"K"=dim(x)[2],"x"=x,"y"=y),
pars = c("beta","sigma_obs","sigma_process","pred"), chains = mcmc_list$n_chain, iter = mcmc_list$n_mcmc, thin = mcmc_list$n_thin)
pars = extract(mod)
pars$beta
dim(pars$beta)
apply(pars$beta[,,1], 2, mean)
plot(apply(pars$beta[,,1], 2, mean))
library(statss)
mod = stan(paste0(stan_dir, "/exec/dlm_slope.stan"), data = list("N"=length(y),"K"=dim(x)[2],"x"=x,"y"=y),
pars = c("beta","sigma_obs","sigma_process","pred"), chains = mcmc_list$n_chain, iter = mcmc_list$n_mcmc, thin = mcmc_list$n_thin)
mod
pars = extract(mod)
dim(pars$pred)
mean = apply(pars$pred,2,mean)
lower = apply(pars$pred,2,quantile,0.025)
upper = apply(pars$pred,2,quantile,0.975)
upper
lower
plot(mean, type="l", lwd=3, ylim=c(-6.5,-2.5), ylab="Intercept estimate", xlab="")
lines(lower)
lines(upper)
plot(mean, type="l", lwd=3, ylim=c(-10,0), ylab="Intercept estimate", xlab="")
lines(lower)
lines(upper)
points(y,col="red")
plot(mean, type="l", lwd=3, ylim=c(-9,-1), ylab="Intercept estimate", xlab="")
lines(lower)
lines(upper)
points(y,col="red")
plot(mean, type="l", lwd=3, ylim=c(-9,-1), ylab="Predictions", xlab="")
lines(lower)
lines(upper)
points(y,col="red")
mod = fit_stan(y = SalmonSurvCUI$logit.s, x = , model_name="dlm-slope")
SalmonSurvCUI$CUI.apr
model.matrix(lm(SalmonSurvCUI$logit.s ~ SalmonSurvCUI$CUI.apr))
library(statss)
mod = fit_stan(y = SalmonSurvCUI$logit.s, x = model.matrix(lm(SalmonSurvCUI$logit.s ~ SalmonSurvCUI$CUI.apr)), model_name="dlm")
mod
library(statss)
mod = fit_stan(y = SalmonSurvCUI$logit.s, x = model.matrix(lm(SalmonSurvCUI$logit.s ~ SalmonSurvCUI$CUI.apr)), model_name="dlm")
y
x = model.matrix(lm(SalmonSurvCUI$logit.s ~ SalmonSurvCUI$CUI.apr))
x
dim(x)
mod = fit_stan(y = SalmonSurvCUI$logit.s, x = model.matrix(lm(SalmonSurvCUI$logit.s ~ SalmonSurvCUI$CUI.apr)), model_name="dlm")
x
# this is just a time-varying model with time varying intercept and slopes
if(class(x)!="matrix") x = matrix(x,ncol=1)
mod = stan(paste0(stan_dir, "/exec/dlm.stan"), data = list("N"=length(y),"K"=dim(x)[2],"x"=x,"y"=y),
pars = c("beta","sigma_obs","sigma_process","pred"), chains = mcmc_list$n_chain, iter = mcmc_list$n_mcmc, thin = mcmc_list$n_thin)
library(MARSS)
data("SalmonSurvCUI")
y = SalmonSurvCUI$logit.s
x = model.matrix(SalmonSurvCUI$logit.s~SalmonSurvCUI$CUI.apr)
x
class(x)
x
fit_stan(y = y, x = x, model = "dlm")
library(statss)
fit_stan(y = y, x = x, model = "dlm")
library(rstan)
fit_stan(y = y, x = x, model = "dlm")
data("harborSealWA")
harborSealWA
matplot(t(harborSealWA))
matplot(harborSealWA)
matplot(harborSealWA[,-1], type="l")
matplot(harborSealWA$Year,harborSealWA[,-1], type="l")
matplot(harborSealWA[,-1], type="l")
matplot(harborSealWA[,-1], type="l", lwd=3)
matplot(harborSealWA[,-1], type="l", lwd=3, ylab="Ln (abundance)")
mod = fit_dfa(y = t(harborSealWA[,-1]), num_trends = 1)
mod
names(mod)
pars = extract(mod)
pars
pars = extract(fit_dfa(y = t(harborSealWA[,-1]), num_trends = 1))
pars
dim(pars)
pars$x
dim(pars$x)
plot(apply(pars$x[,1,],2,mean), type="l", lwd=3)
plot(apply(pars$x[,1,],2,mean), type="l", lwd=3, ylab="Trend")
plot(apply(pars$x[,1,],2,mean), type="l", lwd=3, ylab="Trend", xlab="")
lines(apply(pars$x[,1,],2,quantile,0.025))
lines(apply(pars$x[,1,],2,quantile,0.975))
plot(apply(pars$x[,1,],2,mean), type="l", lwd=3, ylab="Trend", xlab="", ylab=c(-2,4))
plot(apply(pars$x[,1,],2,mean), type="l", lwd=3, ylab="Trend", xlab="", ylim=c(-2,4))
lines(apply(pars$x[,1,],2,quantile,0.975))
lines(apply(pars$x[,1,],2,quantile,0.025))
plot(apply(pars$x[,1,],2,mean), type="l", lwd=3, ylab="Trend", xlab="", ylim=c(-2,6))
lines(apply(pars$x[,1,],2,quantile,0.025))
lines(apply(pars$x[,1,],2,quantile,0.975))
plot(apply(pars$x[,1,],2,mean), type="l", lwd=3, ylab="Trend", xlab="", ylim=c(-2,5))
lines(apply(pars$x[,1,],2,quantile,0.975))
lines(apply(pars$x[,1,],2,quantile,0.025))
y
harborSealWA
y
harborSealWA
harborSealWA[20,]=NA
harborSealWA[21,]=NA
harborSealWA[22,]=NA
pars2 = extract(fit_dfa(y = t(harborSealWA[,-1]), num_trends = 1))
plot(apply(pars$x[,1,],2,mean), type="l", lwd=3, ylab="Trend", xlab="", ylim=c(-2,5))
lines(apply(pars$x[,1,],2,quantile,0.025))
lines(apply(pars$x[,1,],2,quantile,0.975))
lines(apply(pars2$x[,1,],2,quantile,0.025), col="blue")
lines(apply(pars2$x[,1,],2,quantile,0.975), col="blue")
plot(apply(pars$x[,1,],2,mean), type="l", lwd=3, ylab="Trend", xlab="", ylim=c(-5,5))
lines(apply(pars$x[,1,],2,quantile,0.025))
lines(apply(pars$x[,1,],2,quantile,0.975))
lines(apply(pars2$x[,1,],2,quantile,0.975), col="blue")
lines(apply(pars2$x[,1,],2,quantile,0.025), col="blue")
library(statss)
library(statss)
y
data(lakeWAplankton)
# we want lakeWAplanktonTrans, which has been transformed
# so the 0s are replaced with NAs and the data z-scored
dat = lakeWAplanktonTrans
# use only the 10 years from 1980-1989
plankdat = dat[dat[,"Year"]>=1980 & dat[,"Year"]<1990,]
# create vector of phytoplankton group names
phytoplankton = c("Cryptomonas", "Diatoms", "Greens",
"Unicells", "Other.algae")
# get only the phytoplankton
dat.spp.1980 = plankdat[,phytoplankton]
library(MARSS)
y = dat.spp.1980[50:90,]
library(MARSS)
data(lakeWAplankton)
# we want lakeWAplanktonTrans, which has been transformed
# so the 0s are replaced with NAs and the data z-scored
dat = lakeWAplanktonTrans
# use only the 10 years from 1980-1989
plankdat = dat[dat[,"Year"]>=1980 & dat[,"Year"]<1990,]
# create vector of phytoplankton group names
phytoplankton = c("Cryptomonas", "Diatoms", "Greens",
"Unicells", "Other.algae")
# get only the phytoplankton
dat.spp.1980 = plankdat[,phytoplankton]
y = dat.spp.1980[50:90,]
y
states = c(1,2,1,2,1)
obsVariances = rep(1, ncol(y))
proVariances = c(1,1)
trends = c(1,1)
mcmc_list = list(n_mcmc = 1000, n_burn = 500, n_chain = 3, n_thin = 1)
states = c(1,2,1,2,1)
obsVariances = rep(1, ncol(y))
proVariances = c(1,1)
trends = c(1,1)
mod = stan(paste0(stan_dir, "/exec/marss.stan"),
data = list("N"=nrow(y),"M"=ncol(y), "y"=y,
"states"=states, "S" = max(states), "obsVariances"=obsVariances,
"n_obsvar" = max(obsVariances), "proVariances" = proVariances,
"n_provar" = max(proVariances),
"trends"=trends, "n_trends" = max(trends)),
pars = c("pred"), chains = mcmc_list$n_chain,
iter = mcmc_list$n_mcmc, thin = mcmc_list$n_thin)
library(rstan)
states = c(1,2,1,2,1)
obsVariances = rep(1, ncol(y))
proVariances = c(1,1)
trends = c(1,1)
mod = stan(paste0(stan_dir, "/exec/marss.stan"),
data = list("N"=nrow(y),"M"=ncol(y), "y"=y,
"states"=states, "S" = max(states), "obsVariances"=obsVariances,
"n_obsvar" = max(obsVariances), "proVariances" = proVariances,
"n_provar" = max(proVariances),
"trends"=trends, "n_trends" = max(trends)),
pars = c("pred"), chains = mcmc_list$n_chain,
iter = mcmc_list$n_mcmc, thin = mcmc_list$n_thin)
states = c(1,2,1,2,1)
obsVariances = rep(1, ncol(y))
proVariances = c(1,1)
trends = c(1,1)
mod = stan(paste0(stan_dir, "/exec/marss.stan"),
data = list("N"=nrow(y),"M"=ncol(y), "y"=y,
"states"=states, "S" = max(states), "obsVariances"=obsVariances,
"n_obsvar" = max(obsVariances), "proVariances" = proVariances,
"n_provar" = max(proVariances),
"trends"=trends, "n_trends" = max(trends)),
pars = c("pred"), chains = mcmc_list$n_chain,
iter = mcmc_list$n_mcmc, thin = mcmc_list$n_thin)
stan_dir = find.package("statss")
mod = stan(paste0(stan_dir, "/exec/marss.stan"),
data = list("N"=nrow(y),"M"=ncol(y), "y"=y,
"states"=states, "S" = max(states), "obsVariances"=obsVariances,
"n_obsvar" = max(obsVariances), "proVariances" = proVariances,
"n_provar" = max(proVariances),
"trends"=trends, "n_trends" = max(trends)),
pars = c("pred"), chains = mcmc_list$n_chain,
iter = mcmc_list$n_mcmc, thin = mcmc_list$n_thin)
y
dim(y)
library(statss)
mod = stan(paste0(stan_dir, "/exec/marss.stan"),
data = list("N"=nrow(y),"M"=ncol(y), "y"=y,
"states"=states, "S" = max(states), "obsVariances"=obsVariances,
"n_obsvar" = max(obsVariances), "proVariances" = proVariances,
"n_provar" = max(proVariances),
"trends"=trends, "n_trends" = max(trends)),
pars = c("pred"), chains = mcmc_list$n_chain,
iter = mcmc_list$n_mcmc, thin = mcmc_list$n_thin)
library(statss)
mod = stan(paste0(stan_dir, "/exec/marss.stan"),
data = list("N"=nrow(y),"M"=ncol(y), "y"=y,
"states"=states, "S" = max(states), "obsVariances"=obsVariances,
"n_obsvar" = max(obsVariances), "proVariances" = proVariances,
"n_provar" = max(proVariances),
"trends"=trends, "n_trends" = max(trends)),
pars = c("pred"), chains = mcmc_list$n_chain,
iter = mcmc_list$n_mcmc, thin = mcmc_list$n_thin)
library(statss)
mod = stan(paste0(stan_dir, "/exec/marss.stan"),
data = list("N"=nrow(y),"M"=ncol(y), "y"=y,
"states"=states, "S" = max(states), "obsVariances"=obsVariances,
"n_obsvar" = max(obsVariances), "proVariances" = proVariances,
"n_provar" = max(proVariances),
"trends"=trends, "n_trends" = max(trends)),
pars = c("pred"), chains = mcmc_list$n_chain,
iter = mcmc_list$n_mcmc, thin = mcmc_list$n_thin)
dim(y)
y
dat.spp.1980
y = dat.spp.1980
N = nrow(y)
M = ncol(y)
row_indx_pos = matrix((rep(1:M, N)), M, N)[which(!is.na(y))]
col_indx_pos = matrix(sort(rep(1:N, M)), M, N)[which(!is.na(y))]
N
M
n_pos = length(row_indx_pos)
n_pos
row_indx_pos
dim(y)
120*5
row_indx_pos
col_indx_pos
y
dim(y)
col_indx_pos
row_indx_pos = matrix((rep(1:M, N)), M, N)[which(!is.na(y))]
col_indx_pos = matrix(sort(rep(1:N, M)), M, N)[which(!is.na(y))]
row_indx_pos
library(statss)
states = c(1,2,1,2,1)
obsVariances = rep(1, ncol(y))
proVariances = c(1,1)
trends = c(1,1)
N = nrow(y)
M = ncol(y)
row_indx_pos = matrix((rep(1:M, N)), M, N)[which(!is.na(y))]
col_indx_pos = matrix(sort(rep(1:N, M)), M, N)[which(!is.na(y))]
n_pos = length(row_indx_pos)
mod = stan(paste0(stan_dir, "/exec/marss.stan"),
data = list("N"=nrow(y),"M"=ncol(y), "y"=y,
"states"=states, "S" = max(states), "obsVariances"=obsVariances,
"n_obsvar" = max(obsVariances), "proVariances" = proVariances,
"n_provar" = max(proVariances),
"trends"=trends, "n_trends" = max(trends),
"n_pos" = n_pos,
"col_indx_pos" = col_indx_pos,
"row_indx_pos" = row_indx_pos),
pars = c("pred"), chains = mcmc_list$n_chain,
iter = mcmc_list$n_mcmc, thin = mcmc_list$n_thin)
y
y = y[which(!is.na(y))]
y
dat.spp.1980
y = t(dat.spp.1980)
y
y = t(dat.spp.1980)
states = c(1,2,1,2,1)
obsVariances = rep(1, nrow(y))
proVariances = c(1,1)
trends = c(1,1)
N = ncol(y)
M = nrow(y)
row_indx_pos = matrix((rep(1:M, N)), M, N)[which(!is.na(y))]
col_indx_pos = matrix(sort(rep(1:N, M)), M, N)[which(!is.na(y))]
n_pos = length(row_indx_pos)
n_pos
col_indx_pos
y
y = y[which(!is.na(y))]
mod = stan(paste0(stan_dir, "/exec/marss.stan"),
data = list("N"=nrow(y),"M"=ncol(y), "y"=y,
"states"=states, "S" = max(states), "obsVariances"=obsVariances,
"n_obsvar" = max(obsVariances), "proVariances" = proVariances,
"n_provar" = max(proVariances),
"trends"=trends, "n_trends" = max(trends),
"n_pos" = n_pos,
"col_indx_pos" = col_indx_pos,
"row_indx_pos" = row_indx_pos),
pars = c("pred"), chains = mcmc_list$n_chain,
iter = mcmc_list$n_mcmc, thin = mcmc_list$n_thin)
