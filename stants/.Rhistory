fit_stan <- function(y, x, model_name = NA, est_drift = FALSE, n_mcmc = 1000, n_burn = 500, n_chain = 3, n_thin = 1) {
if(model_name == "regression") {
if(class(x)!="matrix") x = matrix(x,ncol=1)
mod = stan("exec/regression.stan", data = list("x"=x,"y"=y,"N"=length(y),"K"=dim(x)[2]),
pars = c("beta","sigma","pred"), chains = n_chain, iter = n_mcmc, thin = n_thin)
}
if(model_name == "rw" & est_drift = FALSE) {
mod = stan("exec/rw.stan", data = list("y"=y,"N"=length(y)), pars = c("sigma","pred"),
chains = n_chain, iter = n_mcmc, thin = n_thin)
}
if(model_name == "rw" & est_drift = TRUE) {
mod = stan("exec/rw_drift.stan", data = list("y"=y,"N"=length(y)), pars = c("sigma","pred","mu"),
chains = n_chain, iter = n_mcmc, thin = n_thin)
}
if(model_name == "ar1" & est_drift = FALSE) {
mod = stan("exec/ar1.stan", data = list("y"=y,"N"=length(y)), pars = c("sigma","pred","phi"),
chains = n_chain, iter = n_mcmc, thin = n_thin)
}
if(model_name == "ar1" & est_drift = TRUE) {
mod = stan("exec/ar1_drift.stan", data = list("y"=y,"N"=length(y)), pars = c("sigma","pred","mu","phi"),
chains = n_chain, iter = n_mcmc, thin = n_thin)
}
if(model_name == "ar2" & est_drift = FALSE) {
mod = stan("exec/ar2.stan", data = list("y"=y,"N"=length(y)), pars = c("sigma","pred","phi"),
chains = n_chain, iter = n_mcmc, thin = n_thin)
}
return(mod)
}
if(model_name == "regression") {
if(class(x)!="matrix") x = matrix(x,ncol=1)
mod = stan("exec/regression.stan", data = list("x"=x,"y"=y,"N"=length(y),"K"=dim(x)[2]),
pars = c("beta","sigma","pred"), chains = n_chain, iter = n_mcmc, thin = n_thin)
}
if(model_name == "rw" & est_drift == FALSE) {
mod = stan("exec/rw.stan", data = list("y"=y,"N"=length(y)), pars = c("sigma","pred"),
chains = n_chain, iter = n_mcmc, thin = n_thin)
}
if(model_name == "rw" & est_drift == TRUE) {
mod = stan("exec/rw_drift.stan", data = list("y"=y,"N"=length(y)), pars = c("sigma","pred","mu"),
chains = n_chain, iter = n_mcmc, thin = n_thin)
}
if(model_name == "ar1" & est_drift == FALSE) {
mod = stan("exec/ar1.stan", data = list("y"=y,"N"=length(y)), pars = c("sigma","pred","phi"),
chains = n_chain, iter = n_mcmc, thin = n_thin)
}
if(model_name == "ar1" & est_drift == TRUE) {
mod = stan("exec/ar1_drift.stan", data = list("y"=y,"N"=length(y)), pars = c("sigma","pred","mu","phi"),
chains = n_chain, iter = n_mcmc, thin = n_thin)
}
if(model_name == "ar2" & est_drift == FALSE) {
mod = stan("exec/ar2.stan", data = list("y"=y,"N"=length(y)), pars = c("sigma","pred","phi"),
chains = n_chain, iter = n_mcmc, thin = n_thin)
}
return(mod)
fit_stan <- function(y, x, model_name = NA, est_drift = FALSE, n_mcmc = 1000, n_burn = 500, n_chain = 3, n_thin = 1) {
if(model_name == "regression") {
if(class(x)!="matrix") x = matrix(x,ncol=1)
mod = stan("exec/regression.stan", data = list("x"=x,"y"=y,"N"=length(y),"K"=dim(x)[2]),
pars = c("beta","sigma","pred"), chains = n_chain, iter = n_mcmc, thin = n_thin)
}
if(model_name == "rw" & est_drift == FALSE) {
mod = stan("exec/rw.stan", data = list("y"=y,"N"=length(y)), pars = c("sigma","pred"),
chains = n_chain, iter = n_mcmc, thin = n_thin)
}
if(model_name == "rw" & est_drift == TRUE) {
mod = stan("exec/rw_drift.stan", data = list("y"=y,"N"=length(y)), pars = c("sigma","pred","mu"),
chains = n_chain, iter = n_mcmc, thin = n_thin)
}
if(model_name == "ar1" & est_drift == FALSE) {
mod = stan("exec/ar1.stan", data = list("y"=y,"N"=length(y)), pars = c("sigma","pred","phi"),
chains = n_chain, iter = n_mcmc, thin = n_thin)
}
if(model_name == "ar1" & est_drift == TRUE) {
mod = stan("exec/ar1_drift.stan", data = list("y"=y,"N"=length(y)), pars = c("sigma","pred","mu","phi"),
chains = n_chain, iter = n_mcmc, thin = n_thin)
}
if(model_name == "ar2" & est_drift == FALSE) {
mod = stan("exec/ar2.stan", data = list("y"=y,"N"=length(y)), pars = c("sigma","pred","phi"),
chains = n_chain, iter = n_mcmc, thin = n_thin)
}
return(mod)
}
fit_stan <- function(y, x, model_name = NA, est_drift = FALSE, n_mcmc = 1000, n_burn = 500, n_chain = 3, n_thin = 1) {
if(model_name == "regression") {
if(class(x)!="matrix") x = matrix(x,ncol=1)
mod = stan("exec/regression.stan", data = list("x"=x,"y"=y,"N"=length(y),"K"=dim(x)[2]),
pars = c("beta","sigma","pred"), chains = n_chain, iter = n_mcmc, thin = n_thin)
}
if(model_name == "rw" & est_drift == FALSE) {
mod = stan("exec/rw.stan", data = list("y"=y,"N"=length(y)), pars = c("sigma","pred"),
chains = n_chain, iter = n_mcmc, thin = n_thin)
}
if(model_name == "rw" & est_drift == TRUE) {
mod = stan("exec/rw_drift.stan", data = list("y"=y,"N"=length(y)), pars = c("sigma","pred","mu"),
chains = n_chain, iter = n_mcmc, thin = n_thin)
}
if(model_name == "ar1" & est_drift == FALSE) {
mod = stan("exec/ar1.stan", data = list("y"=y,"N"=length(y)), pars = c("sigma","pred","phi"),
chains = n_chain, iter = n_mcmc, thin = n_thin)
}
if(model_name == "ar1" & est_drift == TRUE) {
mod = stan("exec/ar1_drift.stan", data = list("y"=y,"N"=length(y)), pars = c("sigma","pred","mu","phi"),
chains = n_chain, iter = n_mcmc, thin = n_thin)
}
if(model_name == "ar2" & est_drift == FALSE) {
mod = stan("exec/ar2.stan", data = list("y"=y,"N"=length(y)), pars = c("sigma","pred","phi"),
chains = n_chain, iter = n_mcmc, thin = n_thin)
}
return(mod)
}
fit_stan(y = y, x = x, model_name="ar2")
library(rstan)
fit_stan(y = y, x = x, model_name="ar2")
y
data("airquality")
y = airquality$Temp
x = airquality$Month
fit_stan(y = y, x = x, model_name="ar2")
fit_stan <- function(y, x, model_name = NA, est_drift = FALSE, P = 1, n_mcmc = 1000, n_burn = 500, n_chain = 3, n_thin = 1) {
if(model_name == "regression") {
if(class(x)!="matrix") x = matrix(x,ncol=1)
mod = stan("exec/regression.stan", data = list("x"=x,"y"=y,"N"=length(y),"K"=dim(x)[2]),
pars = c("beta","sigma","pred"), chains = n_chain, iter = n_mcmc, thin = n_thin)
}
if(model_name == "rw" & est_drift == FALSE) {
mod = stan("exec/rw.stan", data = list("y"=y,"N"=length(y)), pars = c("sigma","pred"),
chains = n_chain, iter = n_mcmc, thin = n_thin)
}
if(model_name == "rw" & est_drift == TRUE) {
mod = stan("exec/rw_drift.stan", data = list("y"=y,"N"=length(y)), pars = c("sigma","pred","mu"),
chains = n_chain, iter = n_mcmc, thin = n_thin)
}
if(model_name == "ar1" & est_drift == FALSE) {
mod = stan("exec/ar1.stan", data = list("y"=y,"N"=length(y)), pars = c("sigma","pred","phi"),
chains = n_chain, iter = n_mcmc, thin = n_thin)
}
if(model_name == "ar" & est_drift == TRUE) {
mod = stan("exec/ar_drift.stan", data = list("y"=y,"N"=length(y)), pars = c("sigma","pred","mu","phi"),
chains = n_chain, iter = n_mcmc, thin = n_thin)
}
if(model_name == "ar2" & est_drift == FALSE) {
mod = stan("exec/ar2.stan", data = list("y"=y,"N"=length(y)), pars = c("sigma","pred","phi"),
chains = n_chain, iter = n_mcmc, thin = n_thin)
}
return(mod)
}
fit_stan(y = y, x = x, model_name="ar", est_drift=TRUE)
library(stants)
?stan_model
stan_model("exec/ma1.stan", save_dso=TRUE)
stan_model("exec/ar_drift.stan", save_dso=TRUE)
stan_model("exec/ar_drift.stan", save_dso=TRUE, auto_write=TRUE)
?source
library(stants)
class(mod)
fit_stan <- function(y, x, model_name = NA, est_drift = FALSE, P = 1, mcmc_list = list(n_mcmc = 1000, n_burn = 500, n_chain = 3, n_thin = 1)) {
if(model_name == "regression") {
if(class(x)!="matrix") x = matrix(x,ncol=1)
mod = stan("exec/regression.stan", data = list("x"=x,"y"=y,"N"=length(y),"K"=dim(x)[2]),
pars = c("beta","sigma","pred"), chains = mcmc_list$n_chain, iter = mcmc_list$n_mcmc, thin = mcmc_list$n_thin)
}
if(model_name == "rw" & est_drift == FALSE) {
mod = stan("exec/rw.stan", data = list("y"=y,"N"=length(y)), pars = c("sigma","pred"),
chains = mcmc_list$n_chain, iter = mcmc_list$n_mcmc, thin = mcmc_list$n_thin)
}
if(model_name == "rw" & est_drift == TRUE) {
mod = stan("exec/rw_drift.stan", data = list("y"=y,"N"=length(y)), pars = c("sigma","pred","mu"),
chains = mcmc_list$n_chain, iter = mcmc_list$n_mcmc, thin = mcmc_list$n_thin)
}
if(model_name == "ar" & est_drift == FALSE) {
mod = stan("exec/ar.stan", data = list("y"=y,"N"=length(y)), pars = c("sigma","pred","phi"),
chains = mcmc_list$n_chain, iter = mcmc_list$n_mcmc, thin = mcmc_list$n_thin)
}
if(model_name == "ar" & est_drift == TRUE) {
mod = stan("exec/ar_drift.stan", data = list("y"=y,"N"=length(y)), pars = c("sigma","pred","mu","phi"),
chains = mcmc_list$n_chain, iter = mcmc_list$n_mcmc, thin = mcmc_list$n_thin)
}
if(model_name == "ma1") {
mod = stan("exec/ma1.stan", data = list("y"=y,"N"=length(y)), pars = c("sigma","pred","mu","phi"),
chains = mcmc_list$n_chain, iter = mcmc_list$n_mcmc, thin = mcmc_list$n_thin)
}
return(mod)
}
y
x
mod = fit_stan(y, x)
mod = fit_stan(y, x, model_name = "regression")
class(mod)
library(stants)
library(rstan)
library(devtools)
devtools::install_github("eric-ward/safs-timeseries/stants")
library(stants)
# for optimizing stan on your machine,
rstan_options(auto_write = TRUE)
options(mc.cores = parallel::detectCores())
data(airquality)
Wind = airquality$Wind # wind speed
Temp = airquality$Temp # air temperature
x = model.matrix(lm(Temp~1))
lm_intercept = fit_stan(y = as.numeric(Temp), x = rep(1, length(Temp)),
model_name = "regression")
lm_intercept = fit_stan(y = as.numeric(Temp), x = rep(1, length(Temp)),
model_name = "ma1")
lm_intercept = fit_stan(y = as.numeric(Temp), x = rep(1, length(Temp)),
model_name = "ma1")
lm_intercept = fit_stan(y = as.numeric(Temp), x = rep(1, length(Temp)),
model_name = "ma1")
lm_intercept = fit_stan(y = as.numeric(Temp), x = rep(1, length(Temp)),
model_name = "rw")
lm_intercept = fit_stan(y = as.numeric(Temp), x = rep(1, length(Temp)),
model_name = "rw",drift=TRUE)
?fit_stan
lm_intercept = fit_stan(y = as.numeric(Temp), x = rep(1, length(Temp)),
model_name = "rw",est_drift=TRUE)
lm_intercept = fit_stan(y = as.numeric(Temp), x = rep(1, length(Temp)),
model_name = "ar",est_drift=FALSE)
lm_intercept = fit_stan(y = as.numeric(Temp), x = rep(1, length(Temp)),
model_name = "ar",est_drift=TRUE)
y = y
x = y
y = Time
x = model.matrix(lm(Temp~1))
x
y
y = as.numeric(Temp)
model_name = "regression_cor"
data = list("N"=length(y),"K"=dim(x)[2],"x"=x,"y"=y)
mcmc_list = list(n_mcmc = 1000, n_burn = 500, n_chain = 3, n_thin = 1)
mod = stan("exec/regression_cor.stan", data = list("N"=length(y),"K"=dim(x)[2],"x"=x,"y"=y),
pars = c("beta","sigma","pred","phi","sigma_cor"), chains = mcmc_list$n_chain, iter = mcmc_list$n_mcmc, thin = mcmc_list$n_thin)
mode
?mod
mod = stan("exec/regression_cor.stan", data = list("N"=length(y),"K"=dim(x)[2],"x"=x,"y"=y),
pars = c("beta","sigma","pred","phi","sigma_cor"), chains = mcmc_list$n_chain, iter = mcmc_list$n_mcmc, thin = mcmc_list$n_thin)
mod
Q =1
model_name = "Ma"
model_name = "ma"
if(model_name == "ma" & Q == 1) {
mod = stan("exec/ma1.stan", data = list("y"=y,"N"=length(y)), pars = c("sigma","pred","mu","phi"),
chains = mcmc_list$n_chain, iter = mcmc_list$n_mcmc, thin = mcmc_list$n_thin)
}
if(model_name == "ma" & Q == 1) {
mod = stan("exec/ma1.stan", data = list("y"=y,"N"=length(y)), pars = c("sigma","pred","mu","phi"),
chains = mcmc_list$n_chain, iter = mcmc_list$n_mcmc, thin = mcmc_list$n_thin)
}
if(model_name == "ma" & Q == 1) {
mod = stan("exec/ma1.stan", data = list("y"=y,"N"=length(y)), pars = c("sigma","pred","mu","theta"),
chains = mcmc_list$n_chain, iter = mcmc_list$n_mcmc, thin = mcmc_list$n_thin)
}
mod = stan("exec/ma.stan", data = list("Q"=Q,"y"=y,"N"=length(y)), pars = c("sigma","pred","mu","theta"),
chains = mcmc_list$n_chain, iter = mcmc_list$n_mcmc, thin = mcmc_list$n_thin)
library(stants)
mod = stan("exec/ma.stan", data = list("Q"=Q,"y"=y,"N"=length(y)), pars = c("sigma","pred","mu","theta"),
chains = mcmc_list$n_chain, iter = mcmc_list$n_mcmc, thin = mcmc_list$n_thin)
dir()
getwd*
dir()
getwd()
dir("exec")
mod = stan("exec/ma.stan", data = list("Q"=Q,"y"=y,"N"=length(y)), pars = c("sigma","pred","mu","theta"),
chains = mcmc_list$n_chain, iter = mcmc_list$n_mcmc, thin = mcmc_list$n_thin)
Q
Q=3
mod = stan("exec/ma.stan", data = list("Q"=Q,"y"=y,"N"=length(y)), pars = c("sigma","pred","mu","theta"),
chains = mcmc_list$n_chain, iter = mcmc_list$n_mcmc, thin = mcmc_list$n_thin)
mod
mod = stan("exec/ma1.stan", data = list("y"=y,"N"=length(y)), pars = c("sigma","pred","mu","theta"),
chains = mcmc_list$n_chain, iter = mcmc_list$n_mcmc, thin = mcmc_list$n_thin)
mod = stan("exec/ma1.stan", data = list("y"=y,"N"=length(y)), pars = c("sigma","pred","mu","theta"),
chains = mcmc_list$n_chain, iter = mcmc_list$n_mcmc, thin = mcmc_list$n_thin)
mod = stan("exec/ma1.stan", data = list("y"=y,"N"=length(y)), pars = c("sigma","pred","mu","theta"),
chains = mcmc_list$n_chain, iter = mcmc_list$n_mcmc, thin = mcmc_list$n_thin)
''
mod = stan("exec/ma1.stan", data = list("y"=y,"N"=length(y)), pars = c("sigma","pred","mu","theta"),
chains = mcmc_list$n_chain, iter = mcmc_list$n_mcmc, thin = mcmc_list$n_thin)
mod = stan("exec/ma1.stan", data = list("y"=y,"N"=length(y)), pars = c("sigma","pred","mu","theta"),
chains = mcmc_list$n_chain, iter = mcmc_list$n_mcmc, thin = mcmc_list$n_thin)
mod = stan("exec/univariate_ss.stan", data = list(y"=y,"N"=length(y)), pars = c("sigma_pro","pred", "sigma_obs"),
chains = mcmc_list$n_chain, iter = mcmc_list$n_mcmc, thin = mcmc_list$n_thin)
mod = stan("exec/univariate_ss.stan", data = list("y"=y,"N"=length(y)), pars = c("sigma_pro","pred", "sigma_obs"),
chains = mcmc_list$n_chain, iter = mcmc_list$n_mcmc, thin = mcmc_list$n_thin)
mod = stan("exec/univariate_ss.stan", data = list("y"=y,"N"=length(y)), pars = c("sigma_pro","pred", "sigma_obs"),
chains = mcmc_list$n_chain, iter = mcmc_list$n_mcmc, thin = mcmc_list$n_thin)
mod = stan("exec/univariate_ss.stan", data = list("y"=y,"N"=length(y)), pars = c("sigma_pro","pred", "sigma_obs"),
chains = mcmc_list$n_chain, iter = mcmc_list$n_mcmc, thin = mcmc_list$n_thin)
mod = stan("exec/univariate_ss.stan", data = list("y"=y,"N"=length(y)), pars = c("sigma_pro","pred", "sigma_obs"),
chains = mcmc_list$n_chain, iter = mcmc_list$n_mcmc, thin = mcmc_list$n_thin)
mod = stan("exec/univariate_ss.stan", data = list("y"=y,"N"=length(y)), pars = c("sigma_pro","pred", "sigma_obs"),
chains = mcmc_list$n_chain, iter = mcmc_list$n_mcmc, thin = mcmc_list$n_thin)
mod = stan("exec/univariate_ss.stan", data = list("y"=y,"N"=length(y)), pars = c("sigma_pro","pred", "sigma_obs"),
chains = mcmc_list$n_chain, iter = mcmc_list$n_mcmc, thin = mcmc_list$n_thin)
mod = stan("exec/univariate_ss.stan", data = list("y"=y,"N"=length(y)), pars = c("sigma_process","pred", "sigma_obs"),
chains = mcmc_list$n_chain, iter = mcmc_list$n_mcmc, thin = mcmc_list$n_thin)
mod
mod = stan("exec/univariate_ss_drift.stan", data = list("y"=y,"N"=length(y)), pars = c("sigma_process","pred", "sigma_obs", "mu"),
chains = mcmc_list$n_chain, iter = mcmc_list$n_mcmc, thin = mcmc_list$n_thin)
ss_ar = stan_fit(y = Temp, est_drift=FALSE, model_name = "ss_ar")
library(rstan)
library(devtools)
devtools::install_github("eric-ward/safs-timeseries/stants")
library(stants)
# for optimizing stan on your machine,
rstan_options(auto_write = TRUE)
options(mc.cores = parallel::detectCores())
data(airquality)
Wind = airquality$Wind # wind speed
Temp = airquality$Temp # air temperature
ss_ar = stan_fit(y = Temp, est_drift=FALSE, model_name = "ss_ar")
ss_rw = stan_fit(y = Temp, est_drift=FALSE, model_name = "ss_rw")
library()
library(stants)
ss_ar = stan_fit(y = Temp, est_drift=FALSE, model_name = "ss_ar")
ss_rw = stan_fit(y = Temp, est_drift=FALSE, model_name = "ss_rw")
?stanfit
ss_ar = fit_stan(y = Temp, est_drift=FALSE, model_name = "ss_ar")
ss_ar
ss_rw = fit_stan(y = Temp, est_drift=FALSE, model_name = "ss_rw")
ss_rw
ss_ar = stan_fit(y = Temp, est_drift=FALSE, model_name = "ss_ar", est_drift=TRUE)
ss_ar = fit_stan(y = Temp, est_drift=FALSE, model_name = "ss_ar", est_drift=TRUE)
ss_ar = fit_stan(y = Temp, model_name = "ss_ar", est_drift=TRUE)
ar1 = stan_fit(y = Temp, x = matrix(1, nrow = length(Temp), ncol = 1),
est_drift=FALSE, P = 1)
ar1 = fit_stan(y = Temp, x = matrix(1, nrow = length(Temp), ncol = 1),
est_drift=FALSE, P = 1)
ss_ar = fit_stan(y = Temp, model_name = "ss_ar", est_drift=TRUE)
ar1 = fit_stan(y = Temp, x = matrix(1, nrow = length(Temp), ncol = 1),
model_name = "ar", est_drift=FALSE, P = 1)
rw = fit_stan(y = Temp, est_drift = FALSE, model_name = "rw")
library(stants)
data(airmiles)
s = cumsum(rnorm(100))
plot(s)
set.seed(123)
s = cumsum(rnorm(100))
plot(s)
set.seed(123)
s = cumsum(rnorm(50))
head(s$dat)
plot(s)
fit_stan(y = Temp, x = rep(1, length(Temp)),
model_name = "arma11")
fit_stan(y = Temp, x = rep(1, length(Temp)),
model_name = "arma11")
library(stants)
fit_stan(y = Temp, x = rep(1, length(Temp)),
model_name = "arma11")
library(stants)
library(stants)
fit_stan(y = Temp, x = rep(1, length(Temp)),
model_name = "arma11")
library(stants)
fit_stan(y = Temp, x = rep(1, length(Temp)),
model_name = "arma11")
library(stants)
fit_stan(y = Temp, x = rep(1, length(Temp)),
model_name = "arma11")
library(stants)
library(stants)
?fit_stan
library(stants)
library(stants)
library(stants)
library(stants)
library(stants)
